@model ProjectHandler.ViewModels.QuestionViewModel
@{
    ViewBag.Title = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@{
    var idFormulaire = Request.Url.Segments[3];
}


<h2 id="titleForm">Create Question</h2>
<div class="form-group">
    <input class="btn btn-primary" type="button" id="btnCreate" value="New Question" />
</div>

@*<button type="button" class="btn btn-primary" data-toggle="modal" data-target="#myModal">
    Open modal
</button>*@
<div class="form-group">
    <input class="btn btn-primary" type="button" data-toggle="modal" value="Open modal" data-target="#myModal" />
</div>

<!-- The Modal -->
<div class="modal" id="myModal">
    <div class="modal-dialog">
        <div class="modal-content">

            <!-- Modal Header -->
            <div class="modal-header">
                <h4 class="modal-title">Modal Heading</h4>
                <button type="button" class="close" data-dismiss="modal">&times;</button>
            </div>

            <!-- Modal body -->
            <div class="modal-body">
                Modal body..
            </div>

            <!-- Modal footer -->
            <div class="modal-footer">
                <button type="button" class="btn btn-danger" data-dismiss="modal">Close</button>
            </div>
            
        </div>
    </div>
</div>

<div class="form-group" id="form-question">
    @using (Html.BeginForm())
    {
        <div class="form-group">
            @Html.LabelFor(q => q.Question.Name)
            @Html.TextBoxFor(q => q.Question.Name, new { @class = "form-control", @id = "txtName" })
            @Html.ValidationMessageFor(q => q.Question.Name)
        </div>
        <div class="form-group">
            @Html.LabelFor(q => q.Question.Message)
            @Html.TextBoxFor(q => q.Question.Message, new { @class = "form-control", @id = "txtMessage" })
            @Html.ValidationMessageFor(q => q.Question.Message)
        </div>
        <div class="form-group">
            @Html.LabelFor(q => q.Question.TypeDonnee.Id)
            @Html.DropDownListFor(q => q.Question.TypeDonnee.Id, new SelectList(Model.TypeDonnees, "Id", "Name"), "Select Type de donnees", new { @class = "form-control", @id = "typeList" })
            @Html.ValidationMessageFor(q => q.Question.TypeDonnee.Id)
        </div>
        <div class="form-group">
            @Html.LabelFor(q => q.Question.Component.Id)
            @Html.DropDownListFor(q => q.Question.Component.Id, new SelectList(Model.Components, "Id", "Name"), "Select Component", new { @class = "form-control", @id = "componentList" })
            @Html.ValidationMessageFor(q => q.Question.Component.Id)
        </div>
        <div id="form-dynamic">
            <div class="row">
                <div class="form-group">
                    <div class="col-lg-offset-1 col-lg-4">
                        @Html.LabelFor(q => q.DynamicReference.Code)
                        @Html.TextBoxFor(q => q.DynamicReference.Code, new { @class = "form-control", @id = "txtCode" })
                        @Html.ValidationMessageFor(q => q.DynamicReference.Code)

                        @Html.LabelFor(q => q.DynamicReference.Texte)
                        @Html.TextBoxFor(q => q.Question.Message, new { @class = "form-control", @id = "txtTexte" })
                        @Html.ValidationMessageFor(q => q.Question.Message)
                        <br />
                        <div class="form-group">
                            <input class="btn button-group" type="button" id="btnAdd" value="Add" />
                        </div>
                    </div>
                    <div class="col-lg-4">
                        <br />
                        <table class="table table-bordered table-hover" id="dynamicRef">
                            <thead>
                                <tr>
                                    <th>Code</th>
                                    <th>Text</th>
                                </tr>
                            </thead>
                            <tbody></tbody>
                        </table>
                    </div>
                </div>
            </div>
        </div>
        @Html.Hidden("idForm", idFormulaire, new { @class = "form-control", @id = "txtFormId" })
        @Html.AntiForgeryToken()
        <br />
        <button type="submit" id="btnSave" class="btn btn-primary">Sauvegarder</button>
    }
</div>

<table class="table table-bordered table-hover" id="question">
    <thead>
        <tr>
            <th>Nom</th>
            <th>Message</th>
            <th>Formulaire</th>
            <th>Type de données</th>
            <th>Composant</th>
            <th>Required</th>
            <th>Dynamic Reference</th>
            <th>Créé par</th>
            <th>Créé le</th>
            <th>Delete</th>
        </tr>
    </thead>
    <tbody></tbody>
</table>

@section scripts
{
    <script type="text/javascript">
        $(document).ready(function () {

            var lignes = [];
            var lastIndex = 0;
            $.ajax({
                url: "/api/question",
                method: "GET",
                success: function (question) {
                    lastIndex = question.length + 1;
                },
                error: function (xhr, status, error) {
                    var err = eval("(" + xhr.responseText + ")");
                    alert(err.Message);
                }
            });

            $("#form-question").hide();
            $("#form-dynamic").hide();
            var formId = $("#txtFormId").val();
            //Populate list of formulaires
            $.ajax({
                url: "/api/formulaire/" + formId,
                method: "GET",
                success: function (formulaire) {
                    document.getElementById("titleForm").innerHTML = "Liste des questions du formulaire " + formulaire.Name;
                }
            });

            var table = $("#question").DataTable({
                ajax: {
                    url: "/api/questionsbyformulaire/" + formId,
                    dataSrc: ""
                },
                columns: [
                    {
                        data: "Name",
                        render: function (data, type, question) {
                            return "<a href='/question/edit/" + question.Id + "'>" + question.Name + "</a>";
                        }
                    },
                    {
                        data: "Message"
                    },
                    {
                        data: "Formulaire.Name"
                    },
                    {
                        data: "TypeDonnee.Name"
                    },
                    {
                        data: "Component.Name"
                    },
                    {
                        data: "Required"
                    },
                    {
                        data: "id",
                        render: function (data) {
                            return "<a href='/dynamicreferences/list/" + data + "'>Voir</a>";
                        }
                    },
                    {
                        data: "CreePar"
                    },
                    {
                        data: "CreeLe"
                    },
                    {
                        data: "Id",
                        render: function (data) {
                            return "<button class='btn-link js-delete' data-question-id=" + data + ">Delete</button>";
                        }
                    }
                ],

            });

            $("#btnCreate").on("click", function () {
                $("#form-question").show();
                $('#myModal').on('shown.bs.modal', function () {
                    $('#myInput').trigger('focus')
                });
            });
            $("#btnAdd").on("click", function () {
                lignes.push({Code: $("#txtCode").val(), Texte: $("#txtTexte").val()});
                $("#dynamicRef").append(
                  "<tr>" +
                    "<td class='attrCode'>" + $("#txtCode").val() + "</td>" +
                    "<td class='attrTexte'>" + $("#txtTexte").val() + "</td>" +
                  "</tr>"
                );
                $("#txtCode").val("");
                $("#txtTexte").val("");
                //$.each(lignes, function (key, valueObj) {
                //    alert(valueObj.Code);
                //});
            });

            $("#componentList").change(function () {
                var idComponent = $("#componentList").val();
                //alert(idComponent);
                if (idComponent == 2) {
                    $("#form-dynamic").show();
                }
            });


            $("#form-question").on("click", "#btnSave", function () {
                var dt = new Date();
                var time = dt.getHours() + ":" + dt.getMinutes() + ":" + dt.getSeconds();//get current datetime
                $.ajax({
                    type: "POST", //HTTP POST Method
                    url: "/api/question", // Controller/View
                    data: JSON.stringify({ //Passing data
                        Name: $("#txtName").val(), //Reading text box values using Jquery
                        FormulaireId: formId,
                        Message: $("#txtMessage").val(),
                        TypeDonneeId: $("#typeList").val(),
                        ComponentId: $("#componentList").val(),
                        Required: false,
                        CreePar: "concepteur",
                        CreeLe: time
                    }),
                    contentType: 'application/json; charset=utf-8',
                    success: function () {
                        alert("Success");
                            $.each(lignes, function (key, valueObj) {
                                //var name = $('.attrCode', b).text();
                                //var value = $('.attrTexte', b).text();
                                alert(valueObj.Code);
                                $.ajax({
                                    type: "POST",
                                    url: "/api/dynamicreference/",
                                    data: JSON.stringify({ //Passing data
                                        Code: valueObj.Code, //Reading text box values using Jquery
                                        QuestionId: lastIndex,
                                        Texte: valueObj.Texte,
                                        CreePar: "concepteur",
                                        CreeLe: time
                                    }),
                                    contentType: 'application/json; charset=utf-8',
                                    success: function () {
                                        alert("Success dynamic");
                                    }
                                });
                            });
                        
                        
                        $("#field-question").remove();
                        $('#question').DataTable().ajax.reload();
                    },
                    error: function (xhr, status, error) {
                        var err = eval("(" + xhr.responseText + ")");
                        alert(err.Message);
                    }
                });
            });
            $('#question').on('click', '.js-delete', function () {
                var button = $(this);
                bootbox.confirm("Are you sure you want to delete this question?", function (result) {
                    if (result) {
                        $.ajax({
                            url: "/api/question/" + button.attr("data-question-id"),
                            method: "DELETE",
                            success: function () {
                                //button.parents("tr").remove();
                                table.row(button.parents("tr")).remove().draw();
                            }
                        });
                    }
                });
            });
        });
    </script>
}

